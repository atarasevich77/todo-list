{"version":3,"sources":["components/AddTodo/AddToDo.js","components/ListToDos/ListToDosItem.js","components/ListToDos/ListToDos.js","App.js","serviceWorker.js","index.js"],"names":["AddToDo","props","useState","toDoName","setTodoName","className","type","value","onChange","event","target","placeholder","onClick","trim","addToList","id","name","isDone","preventDefault","ListToDosItem","toDo","checked","updateToDo","removeToDo","ListToDos","toDos","map","todo","key","App","setToDos","lastId","setLastId","Date","toLocaleDateString","newToDos","el","removedToDo","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOA0BeA,MAxBf,SAAiBC,GAAQ,IAAD,EAEYC,mBAAS,IAFrB,mBAEbC,EAFa,KAEHC,EAFG,KAgBpB,OACI,0BAAMC,UAAU,oBACZ,2BAAOC,KAAK,OAAOC,MAAOJ,EAAUE,UAAU,+BAA+BG,SAdhE,SAACC,GAClBL,EAAYK,EAAMC,OAAOH,QAagFI,YAAY,kCACjH,4BAAQN,UAAU,yDAAyDO,QAX9D,SAACH,GACK,KAApBN,EAASU,SACRZ,EAAMa,UAAU,CAACC,GAAId,EAAMc,GAAK,EAAGC,KAAMb,EAAUc,QAAQ,IAC3Db,EAAY,KAEhBK,EAAMS,mBAMF,SCOGC,MA1Bf,SAAuBlB,GAEnB,IAAMmB,EAAOnB,EAAMmB,KAUnB,OACQ,wBAAIf,UAAWe,EAAKH,OAAS,YAAc,IACvC,yBAAKZ,UAAU,cACX,2BAAOA,UAAU,oBACb,2BAAOA,UAAU,WAAWgB,QAASD,EAAKH,OAAQX,KAAK,WAAWE,SAZ/D,SAACC,GACpBR,EAAMqB,WAAN,2BAAqBF,GAArB,IAA2BH,OAAQR,EAAMC,OAAOW,cAY/BD,EAAKJ,KACN,uBAAGX,UAAU,mBAGrB,uBAAGA,UAAU,sCAAsCO,QAb1C,WACjBX,EAAMsB,WAAWtB,EAAMmB,WCOhBI,MAff,SAAmBvB,GACf,OACI,yBAAKI,UAAU,gBACX,wBAAIA,UAAU,wCACTJ,EAAMwB,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACb,kBAAC,EAAD,CAAeA,IAAKA,EACLR,KAAMO,EACNL,WAAYrB,EAAMqB,WAClBC,WAAYtB,EAAMsB,mBCsCtCM,MA5Cf,WAAgB,IAAD,EACe3B,mBAAS,IADxB,mBACJuB,EADI,KACGK,EADH,OAEiB5B,mBAAS,GAF1B,mBAEJ6B,EAFI,KAEIC,EAFJ,KAyBX,OACI,yBAAK3B,UAAU,8BAA8BU,GAAG,gBAC5C,yBAAKV,UAAU,WACX,yBAAKA,UAAU,+CACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,cAAsC,IAAI4B,MAAOC,sBACjD,kBAAC,EAAD,CAASpB,UA7BnB,SAACM,GACfU,EAAS,GAAD,mBAAKL,GAAL,CAAYL,KACpBY,EAAUZ,EAAKL,KA2BwCA,GAAIgB,IACnC,kBAAC,EAAD,CAAWT,WAzBpB,SAACF,GAChB,IAAMe,EAAWV,EAAMC,KAAI,SAAAU,GACvB,OAAGA,EAAGrB,KAAOK,EAAKL,GACP,2BAAIqB,GAAX,IAAepB,KAAMI,EAAKJ,KAAMC,OAAQG,EAAKH,SAEtCmB,KAGfN,EAASK,IAiBkDZ,WAd5C,SAACc,GAChB,IAAMF,EAAWV,EAAMa,QAAO,SAAClB,GAAD,OAAUiB,IAAgBjB,KACxDU,EAASK,IAY0EV,MAAOA,WC3B9Ec,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9c74ef70.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction AddToDo(props) {\r\n\r\n    const [toDoName, setTodoName] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        setTodoName(event.target.value)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        if(toDoName.trim() !== ''){\r\n            props.addToList({id: props.id + 1, name: toDoName, isDone: false});\r\n            setTodoName('');\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <form className=\"add-items d-flex\">\r\n            <input type=\"text\" value={toDoName} className=\"form-control todo-list-input\" onChange={handleChange} placeholder=\"What do you need to do today?\"/>\r\n            <button className=\"add btn btn-primary font-weight-bold todo-list-add-btn\" onClick={handleSubmit}>Add</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddToDo;\r\n","import React from 'react';\r\n\r\nfunction ListToDosItem(props) {\r\n\r\n    const toDo = props.toDo;\r\n\r\n    const handleCheckBox = (event) => {\r\n        props.updateToDo({...toDo, isDone: event.target.checked});\r\n    }\r\n\r\n    const handleRemove = () => {\r\n        props.removeToDo(props.toDo);\r\n    }\r\n\r\n    return (\r\n            <li className={toDo.isDone ? 'completed' : ''}>\r\n                <div className=\"form-check\">\r\n                    <label className=\"form-check-label\">\r\n                        <input className=\"checkbox\" checked={toDo.isDone} type=\"checkbox\" onChange={handleCheckBox}/>\r\n                        {toDo.name}\r\n                        <i className=\"input-helper\"></i>\r\n                    </label>\r\n                </div>\r\n                <i className=\"remove mdi mdi-close-circle-outline\" onClick={handleRemove}></i>\r\n            </li>\r\n        );\r\n}\r\n\r\nexport default ListToDosItem;\r\n","import React from 'react';\r\nimport ListToDosItem from \"./ListToDosItem\";\r\n\r\nfunction ListToDos(props) {\r\n    return (\r\n        <div className=\"list-wrapper\">\r\n            <ul className=\"d-flex flex-column-reverse todo-list\">\r\n                {props.toDos.map((todo, key) =>\r\n                    <ListToDosItem key={key}\r\n                                   toDo={todo}\r\n                                   updateToDo={props.updateToDo}\r\n                                   removeToDo={props.removeToDo} />\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListToDos;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport AddToDo from \"./components/AddTodo/AddToDo\";\nimport ListToDos from \"./components/ListToDos/ListToDos\";\n\nfunction App() {\n    const [toDos, setToDos] = useState([]);\n    const [lastId, setLastId] = useState(0);\n\n    const addToList = (toDo) => {\n        setToDos([...toDos, toDo]);\n        setLastId(toDo.id);\n    }\n\n    const updateToDo = (toDo) => {\n        const newToDos = toDos.map(el => {\n            if(el.id === toDo.id){\n                return {...el, name: toDo.name, isDone: toDo.isDone}\n            } else {\n                return el;\n            }\n        })\n        setToDos(newToDos);\n    }\n\n    const removeToDo = (removedToDo) => {\n        const newToDos = toDos.filter((toDo) => removedToDo !== toDo)\n        setToDos(newToDos);\n    }\n\n    return (\n        <div className=\"page-content page-container\" id=\"page-content\">\n            <div className=\"padding\">\n                <div className=\"row container d-flex justify-content-center\">\n                    <div className=\"col-lg-12\">\n                        <div className=\"card px-3\">\n                            <div className=\"card-body\">\n                                <h3 className=\"card-title\">Todo list {new Date().toLocaleDateString()}</h3>\n                                <AddToDo addToList={addToList} id={lastId}/>\n                                <ListToDos updateToDo={updateToDo} removeToDo={removeToDo} toDos={toDos}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}