{"version":3,"sources":["components/AddTodo/AddToDo.js","components/ListToDos/ToDoItems.js","components/ListToDos/ListToDos.js","App.js","serviceWorker.js","index.js"],"names":["AddToDo","props","useState","toDoName","setTodoName","className","type","value","onChange","event","target","placeholder","onClick","toDo","id","name","isDone","addToList","preventDefault","ToDoItems","setToDo","completedToDo","setCompletedToDo","checked","updateToDo","ListToDos","toDos","map","todo","key","App","setToDos","lastId","setLastId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMA+BeA,MA5Bf,SAAiBC,GAAQ,IAAD,EACYC,mBAAS,IADrB,mBACbC,EADa,KACHC,EADG,KAoBpB,OACI,0BAAMC,UAAU,oBACZ,2BAAOC,KAAK,OAAOC,MAAOJ,EAAUE,UAAU,+BAA+BG,SAnBhE,SAACC,GAClBL,EAAYK,EAAMC,OAAOH,QAkBgFI,YAAY,kCACjH,4BAAQN,UAAU,yDAAyDO,QAhB9D,SAACH,GAClB,GAAe,IAAZN,EAAe,CACd,IAAMU,EAAO,CACTC,GAAIb,EAAMa,GAAK,EACfC,KAAMZ,EACNa,QAAQ,GAEZf,EAAMgB,UAAUJ,GAChBT,EAAY,IAEhBK,EAAMS,mBAMF,SCGGC,MA1Bf,SAAmBlB,GACf,IAAMY,EAAOZ,EAAMY,KADG,EAESX,mBAAS,CAACY,GAAID,EAAKC,GAAIC,KAAMF,EAAKE,KAAMC,OAAQH,EAAKG,SAF9D,mBAEFI,GAFE,aAGoBlB,mBAASW,EAAKG,OAAS,YAAc,IAHzD,mBAGfK,EAHe,KAGAC,EAHA,KAYtB,OACQ,wBAAIjB,UAAWgB,GACX,yBAAKhB,UAAU,cACX,2BAAOA,UAAU,oBACb,2BAAOA,UAAU,WAAWC,KAAK,WAAWE,SAX3C,SAACC,GAClBR,EAAMY,KAAKG,OAASP,EAAMC,OAAOa,QACjCH,EAAQnB,EAAMY,MACdZ,EAAMY,KAAKG,OAASM,EAAiB,aAAeA,EAAiB,IACrErB,EAAMuB,WAAWX,MAQAA,EAAKE,KACN,uBAAGV,UAAU,mBAGrB,uBAAGA,UAAU,0CCRdoB,MAZf,SAAmBxB,GACf,OACI,yBAAKI,UAAU,gBACX,wBAAIA,UAAU,wCACTJ,EAAMyB,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACb,kBAAC,EAAD,CAAWA,IAAKA,EAAKL,WAAYvB,EAAMuB,WAAYX,KAAMe,UC+B9DE,MAnCf,WAAgB,IAAD,EACe5B,mBAAS,IADxB,mBACJwB,EADI,KACGK,EADH,OAEiB7B,mBAAS,GAF1B,mBAEJ8B,EAFI,KAEIC,EAFJ,OAGa/B,mBAAS,CAACY,GAAI,EAAGC,KAAM,GAAIC,QAAQ,IAHhD,mBAGEI,GAHF,WAcX,OACI,yBAAKf,UAAU,8BAA8BS,GAAG,gBAC5C,yBAAKT,UAAU,WACX,yBAAKA,UAAU,+CACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,aAEI,kBAAC,EAAD,CAASY,UAlBvB,SAACJ,GACfkB,EAAS,GAAD,mBAAKL,GAAL,CAAYb,KACpBoB,EAAUpB,EAAKC,KAgB4CY,MAAOA,EAAOZ,GAAIkB,IAEjD,kBAAC,EAAD,CAAWR,WAfxB,SAACX,GAChBO,EAAQP,IAcuDa,MAAOA,WClB1DQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cd52f99e.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport '../../App.css';\n\nfunction AddToDo(props) {\n    const [toDoName, setTodoName] = useState('');\n\n    const handleChange = (event) => {\n        setTodoName(event.target.value)\n    }\n\n    const handleSubmit = (event) => {\n        if(toDoName != ''){\n            const toDo = {\n                id: props.id + 1,\n                name: toDoName,\n                isDone: false\n            };\n            props.addToList(toDo);\n            setTodoName('');\n        }\n        event.preventDefault();\n    }\n\n    return (\n        <form className=\"add-items d-flex\">\n            <input type=\"text\" value={toDoName} className=\"form-control todo-list-input\" onChange={handleChange} placeholder=\"What do you need to do today?\"/>\n            <button className=\"add btn btn-primary font-weight-bold todo-list-add-btn\" onClick={handleSubmit}>Add</button>\n        </form>\n    );\n}\n\nexport default AddToDo;\n","import React, {useState} from 'react';\nimport '../../App.css';\n\nfunction ToDoItems(props) {\n    const toDo = props.toDo;\n    const [updatedToDo, setToDo] = useState({id: toDo.id, name: toDo.name, isDone: toDo.isDone});\n    const [completedToDo, setCompletedToDo] = useState(toDo.isDone ? 'completed' : '');\n\n    const handleChange = (event) => {\n        props.toDo.isDone = event.target.checked\n        setToDo(props.toDo);\n        props.toDo.isDone ? setCompletedToDo('completed') : setCompletedToDo('');\n        props.updateToDo(toDo);\n    }\n\n    return (\n            <li className={completedToDo}>\n                <div className=\"form-check\">\n                    <label className=\"form-check-label\">\n                        <input className=\"checkbox\" type=\"checkbox\" onChange={handleChange}/>\n                        {toDo.name}\n                        <i className=\"input-helper\"></i>\n                    </label>\n                </div>\n                <i className=\"remove mdi mdi-close-circle-outline\"></i>\n            </li>\n        );\n}\n\nexport default ToDoItems;\n","import React from 'react';\nimport '../../App.css';\nimport ToDoItems from \"./ToDoItems\";\n\nfunction ListToDos(props) {\n    return (\n        <div className=\"list-wrapper\">\n            <ul className=\"d-flex flex-column-reverse todo-list\">\n                {props.toDos.map((todo, key) =>\n                    <ToDoItems key={key} updateToDo={props.updateToDo} toDo={todo}/>\n                )}\n            </ul>\n        </div>\n    );\n}\n\nexport default ListToDos;\n","import React, {useState} from 'react';\nimport './App.css';\nimport AddToDo from \"./components/AddTodo/AddToDo\";\nimport ListToDos from \"./components/ListToDos/ListToDos\";\n\nfunction App() {\n    const [toDos, setToDos] = useState([]);\n    const [lastId, setLastId] = useState(0);\n    const [toDo, setToDo] = useState({id: 0, name: '', isDone: false});\n\n    const addToList = (toDo) => {\n        setToDos([...toDos, toDo]);\n        setLastId(toDo.id);\n    }\n\n    const updateToDo = (toDo) => {\n        setToDo(toDo);\n    }\n\n    return (\n        <div className=\"page-content page-container\" id=\"page-content\">\n            <div className=\"padding\">\n                <div className=\"row container d-flex justify-content-center\">\n                    <div className=\"col-lg-12\">\n                        <div className=\"card px-3\">\n                            <div className=\"card-body\">\n                                <h4 className=\"card-title\">Todo list</h4>\n\n                                    <AddToDo addToList={addToList} toDos={toDos} id={lastId}/>\n\n                                    <ListToDos updateToDo={updateToDo} toDos={toDos}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}